/*
For Loops
-Allow for performing the same task over and over
-Can be used to iterate over a collection of items
-Can be nestedto provide complex repetition
-Come in different forms

//simple for loop

double total = 0; 

for(int loopCounter = 0; loopCounter < 10; loopCounter++) 
{ 
   Console.Out.WriteLine("loopCounter is at: " + loopCounter); 
   total = total + loopCounter; 
} 
Console.Out.WriteLine("Total of values is: " + total); 
Console.Out.WriteLine("Average is: " + total / 10);


//nested for loop

string[] students = new string[] {“Tom”, “Jerry”, “Fred”, “George” }; 
double[] grades = new double[] {91, 89, 95, 82 }; 
int totalAGrades = 0; 
int totalBGrades = 0; 
for(int studentCounter = 0; studentCounter < students.Length; studentCounter++) 
{ 
   for(int gradeCounter = 0; gradeCounter < grades.Length; gradeCounter++) 
   { 
      if(grades[gradeCounter] >= 90) 
      { 
         totalAGrades++; 
      } 
      else if(grades[gradeCounter] >= 80 && grades[gradeCounter] < 90) 
      { 
         totalBGrades++; 
      } 
   } 
}


//for each loop

foreach(string student in students) 
{ 
   foreach(double grade in grades) 
   { 
      if(grade >= 90) 
      { 
         totalAGrades++; 
      } 
      else if(grade >= 80 && grade < 90) 
      { 
         totalBGrades++; 
      } 
   } 
} 


//while loop

int loopCounter = 0; 
while (loopCounter < 4) 
{ 
   Console.Out.WriteLine(loopCounter); 
   loopCounter++; 
} 


//do-while loop

int loopCounter = 0; 
do 
{ 
   Console.Out.WriteLine(loopCounter); 
   loopCounter++; 
} while (loopCounter < 4); 


//recursion 

long value = Factorial(10); 
Console.Out.WriteLine(value); 
static long Factorial(int n) 
{ 
   if (n == 0) 
   { 
      return 1; 
   } 
   return n * Factorial(n - 1); 
}
